generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  id                     String                   @id
  firstName              String
  middleName             String?
  lastName               String
  addressLine1           String
  addressLine2           String?
  city                   String
  state                  String
  zipCode                String
  specialty              String?
  rank                   Int
  ManufacturerDoctors    ManufacturerDoctors[]
  ManufacturerTopPayment ManufacturerTopPayment[]
  payments               Payment[]
  reviews                Review[]
  stateSummary           StateDoctor[]
}

model State {
  id            String              @id
  name          String
  rank          Int
  stateCounty   StateCounty[]
  doctors       StateDoctor[]
  items         StateItem[]
  manufacturers StateManufacturer[]
  summaries     StateSummary[]
}

model StateCounty {
  id          String @id
  stateId     String
  name        String
  fips        String
  totalAmount Float
  population  Int
  year        String
  drugType    String
  state       State  @relation(fields: [stateId], references: [id])
}

model StateSummary {
  id          String @id @default(uuid())
  stateId     String
  totalAmount Float
  year        String
  rank        Int?
  drugType    String
  state       State  @relation(fields: [stateId], references: [id])
}

model StateItem {
  id               String       @id @default(uuid())
  stateId          String
  manufacturerId   String
  year             String
  totalAmount      Float
  transactionCount Int
  drugType         String
  productId        String?
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  product          Product?     @relation(fields: [productId], references: [id])
  state            State        @relation(fields: [stateId], references: [id])
}

model StateDoctor {
  id               String @id @default(uuid())
  stateId          String
  doctorId         String
  year             String
  totalAmount      Float
  transactionCount Int
  drugType         String
  doctor           Doctor @relation(fields: [doctorId], references: [id])
  state            State  @relation(fields: [stateId], references: [id])
}

model StateManufacturer {
  id               String       @id @default(uuid())
  stateId          String
  manufacturerId   String
  year             String
  totalAmount      Float
  transactionCount Int
  drugType         String
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  state            State        @relation(fields: [stateId], references: [id])
}

model Manufacturer {
  id                     String                   @id
  name                   String
  state                  String?
  country                String
  rank                   Int
  doctors                ManufacturerDoctors[]
  items                  ManufacturerItems[]
  ManufacturerState      ManufacturerState[]
  ManufacturerSummary    ManufacturerSummary[]
  ManufacturerTopPayment ManufacturerTopPayment[]
  payments               Payment[]
  stateItems             StateItem[]
  stateSummaries         StateManufacturer[]
}

model ManufacturerSummary {
  id             String       @id @default(uuid())
  manufacturerId String
  totalAmount    Float
  year           String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model ManufacturerState {
  id               String       @id @default(uuid())
  manufacturerId   String
  state            String
  year             String
  totalAmount      Float
  transactionCount Int
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model ManufacturerItems {
  id               String       @id @default(uuid())
  manufacturerId   String
  productName      String?
  productType      String?
  year             String
  totalAmount      Float
  transactionCount Int
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model ManufacturerDoctors {
  id               String       @id @default(uuid())
  manufacturerId   String
  year             String
  doctorId         String
  totalAmount      Float
  transactionCount Int
  doctor           Doctor       @relation(fields: [doctorId], references: [id])
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model ManufacturerTopPayment {
  id             String       @id @default(uuid())
  manufacturerId String
  year           String
  doctorId       String
  amount         Float
  doctor         Doctor       @relation(fields: [doctorId], references: [id])
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  doctorId  String
  rating    Int
  text      String
  createdAt DateTime @default(now())
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id])
  doctor    Doctor   @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, createdBy], name: "review_doctor_user_unique")
  @@index([doctorId], map: "review_doctor_index")
  @@index([createdBy], map: "review_user_index")
}

model Payment {
  id               String       @id
  doctorId         String
  manufacturerName String
  manufacturerId   String
  amount           Float
  date             DateTime     @db.Date
  year             String
  paymentType      String?
  paymentNature    String?
  contextualInfo   String?
  productId        String
  doctor           Doctor       @relation(fields: [doctorId], references: [id])
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  product          Product      @relation(fields: [productId], references: [id])

  @@index([year], map: "payment_year_index")
  @@index([doctorId], map: "payment_doctor_index")
  @@index([manufacturerId], map: "payment_manufacturer_index")
  @@index([productId], map: "payment_product_index")
}

model Product {
  id        String      @id @default(uuid())
  name      String?
  type      String?
  category  String?
  payments  Payment[]
  StateItem StateItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Review        Review[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Test {
  id   String  @id
  name String?
}

model Drugs {
  id                    String  @id
  brand_name            String?
  generic_name          String?
  manufacturer_name     String?
  product_type          String?
  route                 String?
  instructions_for_use  String?
  purpose               String?
  warnings_and_cautions String?
  adverse_reactions     String?
  description           String?
  clinical_studies      String?
  effective_time        String?
  active_ingredient     String?
  laboratory_tests      String?
  overdosage            String?
  microbiology          String?
}

model OpioidTreatment {
  id                         String    @id
  npi                        String
  provider_name              String
  address_line_1             String
  address_line_2             String?
  city                       String
  state                      String
  zip                        String
  medicare_id_effective_date DateTime?
  phone                      String?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  title      String
  url        String
  notes      String
  date       DateTime
  userId     String
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
