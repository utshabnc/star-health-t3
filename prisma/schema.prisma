generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  id                     String                   @id
  firstName              String
  middleName             String?
  lastName               String
  addressLine1           String
  addressLine2           String?
  city                   String
  state                  String
  zipCode                String
  specialty              String?
  rank                   Int
  ManufacturerDoctors    ManufacturerDoctors[]
  ManufacturerTopPayment ManufacturerTopPayment[]
  productPayments        ProductPayment[]
  reviews                Review[]
  stateSummary           StateDoctor[]
}

model State {
  id            String              @id
  name          String
  rank          Int
  stateCounty   StateCounty[]
  doctors       StateDoctor[]
  items         StateItem[]
  manufacturers StateManufacturer[]
  summaries     StateSummary[]
}
model Diseases {
  id              String                   @id
  name            String
  url             String?
}
model Genetics {
  id              String                   @id
  name            String
  url             String?
}
model ClinicalTrials {
  id                      String      @id
  brief_title              String
  central_contactname      String?
  completion_date          String?
  gender                  String?
  healthy_volunteers       String?
  official_title           String?
  org_full_name             String?
  overall_official_name     String?
  maximum_age              String?
  minimum_age              String?
  nctid                   String?
  overall_status           String?
  start_date               String?
}
model Hospital {
  id                       String   @id 
  hospital_id               String
  hospital_org_id            String? 
  ein                      String? 
  name                     String? 
  name_cr                   String? 
  street_address            String? 
  city                     String? 
  state                    String? 
  zip                      String? 
  fips_state_and_county_code   String? 
  hospital_bed_count         String? 
  chrch_affl_f               String? 
  urban_location_f           String? 
  children_hospital_f        String? 
  memb_counc_teach_hosps_f     String? 
  medicare_provider_number   String? 
  county                   String? 
  hospital_bed_size          String? 
  updated_dt                DateTime?
}
model StateCounty {
  id          String @id
  stateId     String
  name        String
  fips        String
  totalAmount Float
  population  Int
  year        String
  drugType    String
  state       State  @relation(fields: [stateId], references: [id])
}

model StateSummary {
  id          String @id @default(uuid())
  stateId     String
  totalAmount Float
  year        String
  rank        Int?
  drugType    String
  state       State  @relation(fields: [stateId], references: [id])
}

model StateItem {
  id               String       @id @default(uuid())
  stateId          String
  manufacturerId   String
  year             String
  totalAmount      Float
  transactionCount Int
  drugType         String
  productId        String?
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  product          Product?     @relation(fields: [productId], references: [id])
  state            State        @relation(fields: [stateId], references: [id])
}

model StateDoctor {
  id               String @id @default(uuid())
  stateId          String
  doctorId         String
  year             String
  totalAmount      Float
  transactionCount Int
  drugType         String
  doctor           Doctor @relation(fields: [doctorId], references: [id])
  state            State  @relation(fields: [stateId], references: [id])
}

model StateManufacturer {
  id               String       @id @default(uuid())
  stateId          String
  manufacturerId   String
  year             String
  totalAmount      Float
  transactionCount Int
  drugType         String
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  state            State        @relation(fields: [stateId], references: [id])
}

model Manufacturer {
  id                     String                   @id
  name                   String
  state                  String?
  country                String
  rank                   Int
  doctors                ManufacturerDoctors[]
  items                  ManufacturerItems[]
  ManufacturerState      ManufacturerState[]
  ManufacturerSummary    ManufacturerSummary[]
  ManufacturerTopPayment ManufacturerTopPayment[]
  payments               Payment[]
  productPayments        ProductPayment[]
  stateItems             StateItem[]
  stateSummaries         StateManufacturer[]
}

model ManufacturerSummary {
  id             String       @id @default(uuid())
  manufacturerId String
  totalAmount    Float
  year           String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model ManufacturerState {
  id               String       @id @default(uuid())
  manufacturerId   String
  state            String
  year             String
  totalAmount      Float
  transactionCount Int
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model ManufacturerItems {
  id               String       @id @default(uuid())
  manufacturerId   String
  productName      String?
  productType      String?
  year             String
  totalAmount      Float
  transactionCount Int
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model ManufacturerDoctors {
  id               String       @id @default(uuid())
  manufacturerId   String
  year             String
  doctorId         String
  totalAmount      Float
  transactionCount Int
  doctor           Doctor       @relation(fields: [doctorId], references: [id])
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model ManufacturerTopPayment {
  id             String       @id @default(uuid())
  manufacturerId String
  year           String
  doctorId       String
  amount         Float
  doctor         Doctor       @relation(fields: [doctorId], references: [id])
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  doctorId  String
  rating    Int
  text      String
  createdAt DateTime @default(now())
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id])
  doctor    Doctor   @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, createdBy], name: "review_doctor_user_unique")
  @@index([doctorId], map: "review_doctor_index")
  @@index([createdBy], map: "review_user_index")
}

model ProductPayment {
  id               String       @id
  doctorId         String
  manufacturerName String
  manufacturerId   String
  amount           Float
  date             DateTime     @db.Date
  year             String
  paymentType      String?
  paymentNature    String?
  contextualInfo   String?
  productType      String?
  productCategory  String?
  productName      String?
  doctor           Doctor       @relation(fields: [doctorId], references: [id])
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])

  @@index([year], map: "product_payment_year_index")
  @@index([doctorId], map: "product_payment_doctor_index")
  @@index([manufacturerId], map: "product_payment_manufacturer_index")
}

model Payment {
  id               String       @id
  doctorId         String
  manufacturerName String
  manufacturerId   String
  amount           Float
  date             DateTime     @db.Date
  year             String
  paymentType      String?
  paymentNature    String?
  contextualInfo   String?
  productId        String
  manufacturer     Manufacturer @relation(fields: [manufacturerId], references: [id])
  product          Product      @relation(fields: [productId], references: [id])

  @@index([year], map: "payment_year_index")
  @@index([doctorId], map: "payment_doctor_index")
  @@index([manufacturerId], map: "payment_manufacturer_index")
  @@index([productId], map: "payment_product_index")
}

model Product {
  id        String      @id @default(uuid())
  name      String?
  type      String?
  category  String?
  payments  Payment[]
  StateItem StateItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Review        Review[]
  sessions      Session[]
  patientIntakeForm  PatientIntakeForm?
  userWaterIntake UserWaterIntake[]
  userFoodJournal UserFoodJournal[]
  mentalHealthJournal MentalHealthJournal[]
  exerciseTrackers ExerciseTracker[]
  customExercises customExercise[]
  substanceTrackers  SubstanceTracker[]
  customSubstances   customSubstance[]
  userDrugTracker    UserDrugTracker[]
  hashedPassword  String?
  userRegisterationInfo  UserRegisterInfo?
  isRegistered  Boolean @default(false)
}

model UserRegisterInfo {
  id            Int      @id @default(autoincrement())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName     String?
  lastName      String?
  dob           String?
  contactNumber String?
  address       String?
  profession    String?
  company       String?
  specialization String?
  licenseNumber String?
  insuranceInformation String?
  gender        String?
  medicalHistory String?
  educationalBackground String?
  linkedin      String?
  twitter       String?
  comments      String?
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  hashedPassword String
  identifier String   @unique
  token      String   @unique
  expires    DateTime

  @@index([identifier])
}

model Test {
  id   String  @id
  name String?
}

model Drugs {
  id                    String  @id
  brand_name            String?
  generic_name          String?
  manufacturer_name     String?
  product_type          String?
  route                 String?
  instructions_for_use  String?
  purpose               String?
  warnings_and_cautions String?
  adverse_reactions     String?
  description           String?
  clinical_studies      String?
  effective_time        String?
  active_ingredient     String?
  laboratory_tests      String?
  overdosage            String?
  microbiology          String?
}

model OpioidTreatment {
  id                         String    @id
  npi                        String
  provider_name              String
  address_line_1             String
  address_line_2             String?
  city                       String
  state                      String
  zip                        String
  medicare_id_effective_date DateTime?
  phone                      String?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  title      String
  url        String
  notes      String?
  userId     String
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PatientIntakeForm {
  id                    Int      @id @default(autoincrement())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName             String?
  lastName              String?
  dateOfBirth           DateTime?
  sex                   String?
  maritialStatus        String?
  email                 String?
  phoneNumber           String?
  homePhone1            String?
  cellPhone1            String?
  workPhone1            String?
  homePhone2            String?
  cellPhone2            String?
  workPhone2            String?
  homePhone3            String?
  cellPhone3            String?
  workPhone3            String?
  medications           String?
  allergies             String?
  address               String?
  emergencyContact1     String?
  relationship1         String?
  emergencyContactPhone1 String?
  emergencyContact2     String?
  relationship2         String?
  emergencyContactPhone2 String?
  insuranceCarried      String?
  insurancePlan         String?
  contactNumber         String?
  policyNumber          String?
  groupNumber           String?
  ssn                   String?
  underMedicalCare      String?
  medicalCareReason     String?
  primaryCarePhysician  String?
  healthConcerns        String?
  weight                Float?            
  height                Float?            
}

model UserFoodJournal {
  id                    Int      @id @default(autoincrement())
  userId                String   
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodItemID            String?
  foodItemAPI           String?
  dateTimeOfMeal        DateTime
  nutrientResponse      Json?
  numberOfServings      Float? 
  mealCategory          String?
}

model UserWaterIntake {
    id                    Int      @id @default(autoincrement())
    userId                String   
    user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    dateTimeOfIntake      DateTime
    numberOfGlasses       Int
}

model MentalHealthJournal {
  id                Int      @id @default(autoincrement())
  entryDate         DateTime 
  moodScale         Int
  emotionTags       String
  freeFormJournal   String   @db.VarChar(1000)
  dailyGratitude    String   @db.VarChar(500)
  triggerIdentification String @db.VarChar(500)
  copingStrategies  String   @db.VarChar(500)
  userId            String   
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model SubstanceTracker {
  id                Int      @id @default(autoincrement())
  entryDateTime     DateTime 
  substance         Int
  dosageAmount      Float
  methodOfConsumption String
  moodBefore  String   @db.VarChar(500)
  moodAfter  String   @db.VarChar(500)
  userId            String
  customSubstance   customSubstance @relation(fields: [substance], references: [id])
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model customSubstance {
  id                Int      @id @default(autoincrement())
  substance         String
  dosageUnit        String
  dailylimit        Float @default(0)
  weeklylimit       Float @default(0)
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  substanceTrackers SubstanceTracker[]
}
model adminSubstance {
    id                Int      @id @default(autoincrement())
    substanceName         String
}
model adminExercise {
    id                Int      @id @default(autoincrement())
    exerciseName         String
}
model UserDrugTracker{
  id                Int      @id @default(autoincrement())
  spl_id            String
  brand_name        String?
  manufacturer_name String?
  dosge_descrip     String?
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  drugLog           UserDrugLog[]
 }

 model UserDrugLog{
  id                Int      @id @default(autoincrement())
  amount            Int
  dateTimeOfLog     DateTime
  dosageType        String
  methodOfConsumption String

  sideEffectFelt   String   @db.VarChar(500)
  drugId            Int 
  drug              UserDrugTracker @relation(fields: [drugId], references: [id], onDelete: Cascade)
 }

model customExercise {
  id                Int      @id @default(autoincrement())
  exerciseName      String
  unitToTrack       String
  userId            String
  dailyGoal         Float @default(0)
  weeklyGoal        Float @default(0)
  monthlyGoal       Float @default(0)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseTrackers ExerciseTracker[]
}

model ExerciseTracker {
  id                Int      @id @default(autoincrement())
  userId            String
  entryDateTime     DateTime 
  customExerciseId  Int
  duration          Float
  intensity         String
  calorieBurned     Float
  unitToTrackValue  Float
  customExercise   customExercise @relation(fields: [customExerciseId], references: [id])
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

